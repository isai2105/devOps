---
# How to run this playbook:
# ansible-playbook ansible_playbook_sample.yml --verbose (optional)
# You can define variables when you run your playbook by passing variables at the command line using the --extra-vars (or -e) argument.
# Example 1: ansible-playbook release.yml --extra-vars "version=1.23.45 other_variable=foo"
# Example 2: ansible-playbook arcade.yml --extra-vars '{"pacman":"mrs","ghosts":["inky","pinky","clyde","sue"]}'
# The name of the play
- name: Network Getting Started First Playbook
  # Setting it to not gather facts such as:
  # TASK [Gathering Facts] *****************************
  # ok: [localhost]
  gather_facts: false
  # hosts is a mandatory field. "all" does not match localhost
  hosts: localhost
  vars:
    app_path: "base_path_value_from_vars"
    region:
      - northeast
      - southeast
      - midest
    keyValueVariable:
      key1: value1
      key2: value2
  vars_files:
    # relative path to a file containing variables
    # sensible variable files containing delicate info should not be into git
    - ansible_variables_to_import.yml

  tasks:
    # name of the task
    - name: Sample with loop and accessing / creating variables
      debug:
        # using the item of the loop
        # the following is a multine string
        # note the use of default value for a variable
        # note how we call a variable "customvar1" from an external inventory
        msg: |
          This is a simple message {{ item }} .. path: {{ app_path }}
          Accessing simple variable ... value: {{ app_path }}
          Accessing array variable ... value: {{ region }}
          Accessing an item of the array variable ... value: {{ region[0] }}
          Accessing an item of the key-value variable ... value: {{ keyValueVariable['key1'] }}
          Accessing a variable from an imported file... value: {{ password }}
          Accessing a variable from an external inventory... value: {{ customvar1 | default('ERROR - please use "-i inventory" to see the value of this variable') }}
      # loop definition and its items
      loop:
        - testmessage1
        - testmessage2
      # registering the putput of this task to a variable
      register: registered_variable

    - name: Output the previously registered variable
      debug:
        # using the previously registered variable
        msg: "{{ registered_variable }}"

    - name: Leaving a mark
      command: "touch /tmp/ansible_was_here"
